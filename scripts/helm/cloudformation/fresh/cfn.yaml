# vim: set foldmethod=indent:
AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          defualt: DB configuration
        Parameters:
          - RDSMasterUserPassword
          - RDSMasterUser
      - Label:
          default: Api configuration
        Parameters:
          - EmailHost
          - EmailPort
          - EmailPassword
          - EmailUseTLS
          - EmailUseSSL
          - EmailSSLKey
          - EmailSSLCert
          - EmailFrom
          - SiteURL
          - JWTSecret

Parameters:
  RDSMasterUserPassword:
    Description: Master user password for RDS database
    Type: String
    NoEcho: true
    Default: openreplayPostgres
  RDSMasterUser:
    Description: Master user for RDS database
    Type: String
    Default: openreplay
  EmailHost:
    Description: SMTP host for sending mails
    Type: String
    Default: ""
  EmailPort:
    Description: Port of SMTP server
    Type: String
    Default: "587"
  EmailPassword:
    Description: Password for SMTP server
    Type: String
    Default: ""
    NoEcho: "true"
  EmailUseTLS:
    Description: Use TLS for SMTP
    Type: String
    Default: "true"
  EmailUseSSL:
    Description: Use SSL for SMTP
    Type: String
    Default: "false"
  EmailSSLKey:
    Description: Certificate key for SMTP SSL
    Type: String
    Default: ""
  EmailSSLCert:
    Description: Certificate for SMTP SSL
    Type: String
    Default: ""
  EmailFrom:
    Description: From address for email
    Type: String
    Default: "user@email.com"
    # Makes the param mandatory
    AllowedPattern: ".+@.*"
  SiteURL:
    Description: Domain name of the website
    Type: String
    Default: "https://openreplay.myinstance.com"
    AllowedPattern: "https://.+"
  JWTSecret:
    Description: 16 character password to encrypt jwt secrets
    Type: String
    Default: "mysupersecretpassword123"
    AllowedPattern: "[a-zA-Z0-9]+"

Description: ""
Resources:
##############
# LoadBalancer
##############
  PublicLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ECSCluster}-frontend"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
      - !Ref EC2Subnet
      - !Ref EC2Subnet2
      SecurityGroups: 
      - !Ref EC2SecurityGroup
      IpAddressType: "ipv4"
  PublicLBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
      - 
        Order: 1
        TargetGroupArn: !Ref PublicLBTargetGroupFrontend
        Type: "forward"

  PublicLBListenerRuleApi:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: 1
      ListenerArn: !Ref PublicLBListener
      Conditions: 
      - 
        Field: "path-pattern"
        Values: 
        - "/api"
      Actions: 
      - 
        Type: "forward"
        TargetGroupArn: !Ref PublicLBTargetGroupApi
        Order: 1
        ForwardConfig: 
          TargetGroups: 
          - 
            TargetGroupArn: !Ref PublicLBTargetGroupApi
            Weight: 1
          TargetGroupStickinessConfig: 
            Enabled: false
  PublicLBTargetGroupApi:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 8000
      Protocol: "HTTP"
      HealthCheckPort: "8000"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher: 
        HttpCode: "403"
      HealthyThresholdCount: 5
      VpcId: !Ref EC2VPC
      Name: "ecs-openre-api"

  PublicLBListenerRuleAssist:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: 2
      ListenerArn: !Ref PublicLBListener
      Conditions: 
      - 
        Field: "path-pattern"
        Values: 
        - "/assist"
      Actions: 
      - 
        Type: "forward"
        TargetGroupArn: !Ref PublicLBTargetGroupAssist
        Order: 1
        ForwardConfig: 
          TargetGroups: 
          - 
            TargetGroupArn: !Ref PublicLBTargetGroupAssist
            Weight: 1
          TargetGroupStickinessConfig: 
            Enabled: false
  PublicLBTargetGroupAssist:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 9000
      Protocol: "HTTP"
      HealthCheckPort: "9000"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref EC2VPC
      Name: "ecs-openre-assist"

  PublicLBListenerRuleWorker:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Priority: 3
      ListenerArn: !Ref PublicLBListener
      Conditions: 
      - 
        Field: "path-pattern"
        Values: 
        - "/ingest"
      Actions: 
      - 
        Type: "forward"
        TargetGroupArn: !Ref PublicLBTargetGroupWorkers
        Order: 1
        ForwardConfig: 
          TargetGroups: 
          - 
            TargetGroupArn: !Ref PublicLBTargetGroupWorkers
            Weight: 1
          TargetGroupStickinessConfig: 
            Enabled: false
  PublicLBTargetGroupWorkers:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref EC2VPC
      Name: "ecs-openre-woker"

  PublicLBTargetGroupFrontend:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn:
      - PublicLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref EC2VPC
      Name: "ecs-openre-frontend"

##############
# ECS
##############
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "openreplay"
      ClusterSettings: 
      - 
        Name: "containerInsights"
        Value: "enabled"
      CapacityProviders: 
      - "FARGATE_SPOT"
      - "FARGATE"

  ECSLogger:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: OpenReplayECSLogs
      RetentionInDays: 7

  ApiECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions: 
      - 
        Environment: 
        -
          Name: "pg_host"
          Value: !Sub "${RDSDBInstance.Endpoint.Address}"
        -
          Name: "pg_port"
          Value: "5432"
        -
          Name: "pg_dbname"
          Value: "postgres"
        -
          Name: "pg_user"
          Value: !Sub "${RDSMasterUser}"
        -
          Name: "pg_password"
          Value: !Sub "${RDSMasterUserPassword}"
        -
          Name: "ch_host"
          Value: "clickhouse.db.svc.cluster.local"
        -
          Name: "ch_port"
          Value: "9000"
        -
          Name: "captcha_server"
          Value: ""
        -
          Name: "captcha_key"
          Value: ""
        -
          Name: "async_Token"
          Value: ""
        -
          Name: "EMAIL_HOST"
          Value: !Ref EmailHost
        -
          Name: "EMAIL_PORT"
          Value: !Ref EmailPort
        -
          Name: "EMAIL_USER"
          Value: !Ref EmailPort
        -
          Name: "EMAIL_PASSWORD"
          Value: !Ref EmailPassword
        -
          Name: "EMAIL_USE_TLS"
          Value: !Ref EmailUseTLS
        -
          Name: "EMAIL_USE_SSL"
          Value: !Ref EmailUseSSL
        -
          Name: "EMAIL_SSL_KEY"
          Value: !Ref EmailSSLKey
        -
          Name: "EMAIL_SSL_CERT"
          Value: !Ref EmailSSLCert
        -
          Name: "EMAIL_FROM"
          Value: !Ref EmailFrom
        -
          Name: "SITE_URL"
          Value: !Ref SiteURL
        -
          Name: "announcement_url"
          Value: ""
        -
          Name: "jwt_secret"
          Value: !Ref JWTSecret
        -
          Name: "jwt_algorithm"
          Value: "HS512"
        -
          Name: "jwt_exp_delta_seconds"
          Value: "2592000"
          # Override with your https://domain_name
          # eg: https://openreplay.mycompany.com
        -
          Name: "S3_HOST"
          Value: "http://minio.db.svc.cluster.local:9000"
        -
          Name: "S3_KEY"
          Value: "minios3AccessKeyS3cr3t"
        -
          Name: "S3_SECRET"
          Value: "m1n10s3CretK3yPassw0rd"
        -
          Name: "AWS_DEFAULT_REGION"
          Value: "us-east-1"
        -
          Name: "sessions_region"
          Value: !Ref AWS::Region
        -
          Name: "sessions_bucket"
          Value: "mobs"
        -
          Name: "sourcemaps_bucket"
          Value: "sourcemaps"
        -
          Name: "js_cache_bucket"
          Value: "sessions-assets"
        -
          Name: "sourcemaps_reader"
          Value: "http://localhost:9000/assist/sourcemaps"
        -
          Name: "peers"
          Value: "http://localhost:9000/assist/peers"
          # Enable logging for python app
          # Ref: https://stackoverflow.com/questions/43969743/logs-in-kubernetes-pod-not-showing-up
        -
          Name: "PYTHONUNBUFFERED"
          Value: "0"
        -
          Name: "version_number"
          Value: "1.3.0"
        -
          Name: "SAML2_MD_URL"
          Value: "''"
        -
          Name: "idp_entityId"
          Value: "''"
        -
          Name: "idp_sso_url"
          Value: "''"
        -
          Name: "idp_x509cert"
          Value: "''"
        -
          Name: "idp_sls_url"
          Value: "''"
        Essential: true
        # TODO: Change the address to public all image
        Image: "rg.fr-par.scw.cloud/foss/altogether-api"
        Name: "api"
        PortMappings: 
        - 
          ContainerPort: 8000
          HostPort: 8000
          Protocol: "tcp"
        - 
          ContainerPort: 9000
          HostPort: 9000
          Protocol: "tcp"
        LogConfiguration: 
          LogDriver: "awslogs"
          Options: 
            awslogs-group: !Ref ECSLogger
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "openreplayapi-"
      Family: "ApiECSService"
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
      - "FARGATE"
      Cpu: "1024"
      Memory: "2048"

  ApiECSService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - PublicLoadBalancer
      - PublicLBListener
      - ECSRole
    Properties:
      ServiceName: "altogether-api"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers: 
      - 
        TargetGroupArn: !Ref PublicLBTargetGroupApi
        ContainerName: "api"
        ContainerPort: 8000
      - 
        TargetGroupArn: !Ref PublicLBTargetGroupAssist
        ContainerName: "api"
        ContainerPort: 9000
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref ApiECSTaskDefinition
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: false
          Rollback: false
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: "ENABLED"
          SecurityGroups: 
          - !Ref EC2SecurityGroup
          Subnets: 
          - !Ref EC2Subnet2
          - !Ref EC2Subnet
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"

  WorkerECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions: 
      - 
        Environment: 
        - 
          Name: "S3_BUCKET_ASSETS"
          Value: !Ref SessionAssetsBucket
        - 
          Name: "GROUP_CACHE"
          Value: "cache-all"
        - 
          Name: "AWS_REGION"
          Value: !Sub "${AWS::Region}"
        - 
          Name: "GROUP_DB"
          Value: "db-all"
        - 
          Name: "GROUP_STORAGE"
          Value: "storage-all"
        - 
          Name: "TOKEN_SECRET"
          Value: "whatewer"
        - 
          Name: "S3_BUCKET_WEB"
          Value: !Ref MobsBucket
        - 
          Name: "GROUP_ENDER"
          Value: "ender-all"
        - 
          Name: "MOBILE_IMAGES_BUCKET"
          Value: !Ref MobileAssetsBucket
        - 
          Name: "GROUP_SINK"
          Value: "sink-all"
        - 
          Name: "REDIS_STRING"
          Value: !Sub "${ElastiCacheCluster.RedisEndpoint.Address}:6379"

        # TODO: change to chalice:8000/alerts/notifications
        - 
          Name: "ALERT_NOTIFICATION_STRING"
          Value: "REPLACEME"
        - 
          Name: "ASSETS_BUCKET"
          Value: "openreplay-sessions-assets"
        - 
          Name: "ASSETS_ORIGIN"
          # Original value: https://assets-staging.asayer.io
          Value: "/staging/s3/buckets/assets_origin"
        - 
          Name: "AWS_ACCESS_KEY_ID"
          Value: !Ref S3AccessUserKey
        - 
          Name: "AWS_SECRET_ACCESS_KEY"
          Value: !GetAtt S3AccessUserKey.SecretAccessKey
        - 
          Name: "POSTGRES_STRING"
      # AvailabilityZone: !Sub "${AWS::Region}b"
          Value: !Sub "postgres://${RDSMasterUser}:${RDSMasterUserPassword}@${RDSDBInstance.Endpoint.Address}/app"
        Essential: true
        # TODO: Change the address to public all image
        Image: "rg.fr-par.scw.cloud/foss/altogether-workers"
        MountPoints: 
        - 
          SourceVolume: "string"
          ContainerPath: "/filestorage"
        Name: "nginx"
        PortMappings: 
        - 
          ContainerPort: 80
          HostPort: 80
          Protocol: "tcp"
        LogConfiguration: 
          LogDriver: "awslogs"
          Options: 
            awslogs-group: !Ref ECSLogger
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "openreplayworker"
      Family: "WorkerECSService"
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      NetworkMode: "awsvpc"
      Volumes: 
      - 
        Name: "string"
        Host: {}
      RequiresCompatibilities: 
      - "FARGATE"
      Cpu: "2048"
      Memory: "4096"

  WorkerECSService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - PublicLoadBalancer
      - PublicLBListener
      - ECSRole
    Properties:
      ServiceName: "altogether"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers: 
      - 
        TargetGroupArn: !Ref PublicLBTargetGroupWorkers
        ContainerName: "nginx"
        ContainerPort: 80
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref WorkerECSTaskDefinition
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: false
          Rollback: false
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: "ENABLED"
          SecurityGroups: 
          - !Ref EC2SecurityGroup
          Subnets: 
          - !Ref EC2Subnet2
          - !Ref EC2Subnet
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"

  FrontendECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions: 
      - 
        Environment: 
        - 
          Name: "Name"
          Value: "OpenreplayFrontend"
        Essential: true
        # TODO: Change the address to public all image
        Image: "rg.fr-par.scw.cloud/foss/frontend"
        Name: "frontend"
        PortMappings: 
        - 
          ContainerPort: 80
          HostPort: 80
          Protocol: "tcp"
        LogConfiguration: 
          LogDriver: "awslogs"
          Options: 
            awslogs-group: !Ref ECSLogger
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "openreplayfrontend"
      Family: "FrontendECSService"
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
      - "FARGATE"
      Cpu: "256"
      Memory: "512"

  FrontendECSService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - PublicLoadBalancer
      - PublicLBListener
      - ECSRole
    Properties:
      ServiceName: "frontend"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers: 
      - 
        TargetGroupArn: !Ref PublicLBTargetGroupFrontend
        ContainerName: "frontend"
        ContainerPort: 80
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref FrontendECSTaskDefinition
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: false
          Rollback: false
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: "ENABLED"
          SecurityGroups: 
          - !Ref EC2SecurityGroup
          Subnets: 
          - !Ref EC2Subnet2
          - !Ref EC2Subnet
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"


##############
# Network
##############
  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - 
          Key: "Name"
          Value: "OpenReplay"

  EC2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Name"
        Value: !Sub "${ECSCluster}/Private"

  EC2Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Name"
        Value: !Sub "${ECSCluster}/Public"

  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC

  EC2RouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC

  EC2VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: "dopt-3f4ca456"
      VpcId: !Ref EC2VPC

  EC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref EC2InternetGateway
      VpcId: !Ref EC2VPC

  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "openreplay sg"
      GroupName: "openreplaysg"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress: 
      - 
        CidrIp: "0.0.0.0/0"
        FromPort: 80
        IpProtocol: "tcp"
        ToPort: 80
      SecurityGroupEgress: 
      - 
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
  EC2SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: "Security Group rule for internal communication."
      GroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId
      IpProtocol: "-1"

  EC2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet

  EC2SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet2

  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable

  EC2Route2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable2

##############
# IAM Role
##############
  ECSRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "openreplayECSTaskExecutionRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
##############
# IAM User
##############
  S3AccessUser:
    Type: AWS::IAM::User
    Properties:
      Path: "/"
      # LoginProfile:
      #   Password: !Ref S3UserPassword
      Policies:
      - PolicyName: giveaccesstoOpenReplayS3Only
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - !GetAtt MobsBucket.Arn
            - !GetAtt SessionAssetsBucket.Arn
            - !GetAtt StaticAssetsBucket.Arn
            - !GetAtt SourceMapsBucket.Arn
            - !GetAtt MobileAssetsBucket.Arn
          - Effect: Deny
            Action:
            - s3:*
            NotResource:
            - !GetAtt MobsBucket.Arn
            - !GetAtt SessionAssetsBucket.Arn
            - !GetAtt StaticAssetsBucket.Arn
            - !GetAtt SourceMapsBucket.Arn
            - !GetAtt MobileAssetsBucket.Arn
  S3AccessUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref S3AccessUser

###############
## Databases
###############
  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Created from the RDS Management Console"
      DBSubnetGroupName: "openreplayRdsSubnetGroup"
      SubnetIds: 
      - !Ref EC2Subnet
      - !Ref EC2Subnet2

  RDSDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: "openreplay"
      AllocatedStorage: "20"
      DBInstanceClass: "db.t3.micro"
      Engine: "postgres"
      MasterUsername: !Ref RDSMasterUser
      MasterUserPassword: !Ref RDSMasterUserPassword 
      PreferredBackupWindow: "04:55-05:25"
      BackupRetentionPeriod: 7
      AvailabilityZone: !Sub "${AWS::Region}b"
      PreferredMaintenanceWindow: "thu:06:41-thu:07:11"
      MultiAZ: false
      EngineVersion: "13.3"
      AutoMinorVersionUpgrade: true
      LicenseModel: "postgresql-license"
      PubliclyAccessible: false
      StorageType: "gp2"
      Port: "5432"
      StorageEncrypted: true
      CopyTagsToSnapshot: true
      EnableIAMDatabaseAuthentication: false
      DeletionProtection: false
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      VPCSecurityGroups: 
      - !Ref EC2SecurityGroup
      MaxAllocatedStorage: 1000
      DBParameterGroupName: "default.postgres13"
      OptionGroupName: "default:postgres-13"

  ElastiCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Created using openreplay cloudformation."
      CacheSubnetGroupName: "openreplayRedisSubnetGroup"
      SubnetIds: 
      - !Ref EC2Subnet
      - !Ref EC2Subnet2

  ElastiCacheCluster:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      CacheNodeType: "cache.t2.micro"
      Engine: "redis"
      EngineVersion: "6.x"
      NumCacheNodes: 1
      PreferredAvailabilityZone: !Sub "${AWS::Region}b"
      PreferredMaintenanceWindow: "sat:05:30-sat:06:30"
      CacheParameterGroupName: "default.redis6.x"
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      AutoMinorVersionUpgrade: true
      VpcSecurityGroupIds: 
      - !Ref EC2SecurityGroup
      SnapshotRetentionLimit: 1
      SnapshotWindow: "02:00-03:00"
      ClusterName: "openreplay-redis-001"

##############
# S3 bucket
##############
# Because the name should be globally unique, we are generating a random number from the stack id.
  MobsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
      - "-"
      - - "openreplay-mobs"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - 
          ServerSideEncryptionByDefault: 
            SSEAlgorithm: "AES256"
          BucketKeyEnabled: false
      LifecycleConfiguration: 
        Rules: 
        - 
          AbortIncompleteMultipartUpload: 
            DaysAfterInitiation: 7
          Id: "remove30"
          Status: "Enabled"
          ExpirationInDays: 30
      CorsConfiguration: 
        CorsRules: 
        - 
          AllowedHeaders: 
          - "Authorization"
          AllowedMethods: 
          - "GET"
          - "HEAD"
          AllowedOrigins: 
          - "*"

  SessionAssetsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: !Join
      - "-"
      - - "openreplay-sessions-assets"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      LifecycleConfiguration: 
        Rules: 
        - 
          AbortIncompleteMultipartUpload: 
            DaysAfterInitiation: 1
          Id: "remove30"
          Status: "Enabled"
          ExpirationInDays: 30
      CorsConfiguration: 
        CorsRules: 
        - 
          AllowedHeaders: 
          - "*"
          AllowedMethods: 
          - "GET"
          AllowedOrigins: 
          - "*"

  StaticAssetsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration: 
        IndexDocument: "index.html"
        ErrorDocument: "index.html"
      AccessControl: PublicRead
      BucketName: !Join
      - "-"
      - - "openreplay-static"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"

  SourceMapsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
      - "-"
      - - "openreplay-sourcemaps"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - 
          ServerSideEncryptionByDefault: 
            SSEAlgorithm: "AES256"
          BucketKeyEnabled: false
      CorsConfiguration: 
        CorsRules: 
        - 
          AllowedHeaders: 
          - "Authorization"
          AllowedMethods: 
          - "GET"
          - "HEAD"
          AllowedOrigins: 
          - "*"
  MobileAssetsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
      - "-"
      - - "asayer-sessions-mobile-assets"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - 
          ServerSideEncryptionByDefault: 
            SSEAlgorithm: "AES256"
          BucketKeyEnabled: false
