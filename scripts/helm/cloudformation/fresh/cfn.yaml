AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "former2"
Description: ""
Resources:
  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "ip"
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref EC2VPC
      Name: "ecs-openre-frontend"

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "openreplay"
      ClusterSettings: 
      - 
        Name: "containerInsights"
        Value: "enabled"
      CapacityProviders: 
      - "FARGATE_SPOT"
      - "FARGATE"

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions: 
      - 
        Environment: 
        - 
          Name: "name"
          Value: "nginx"
        - 
          Name: !Ref ECSCluster
          Value: "nginx"
        Essential: true
        Image: "nginx"
        LogConfiguration: 
          LogDriver: "awslogs"
          Options: 
            awslogs-group: "/ecs/nginx"
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "ecs"
        Name: "nginx"
        PortMappings: 
        - 
          ContainerPort: 80
          HostPort: 80
          Protocol: "tcp"
      Family: "nginx"
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      NetworkMode: "awsvpc"
      RequiresCompatibilities: 
      - "FARGATE"
      Cpu: "1024"
      Memory: "2048"

  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn: 
      - ElasticLoadBalancingV2LoadBalancer
      - ECSTaskDefinition
      - ECSRole
    Properties:
      ServiceName: "nginx"
      Cluster: !GetAtt ECSCluster.Arn
      LoadBalancers: 
      - 
        # TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/ecs-openre-nginx/91a1080be324db0d"
        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
        ContainerName: "nginx"
        ContainerPort: 80
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/nginx"
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker: 
          Enable: false
          Rollback: false
      # Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: "ENABLED"
          SecurityGroups: 
          - !Ref EC2SecurityGroup
          Subnets: 
          - !Ref EC2Subnet2
          - !Ref EC2Subnet
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"

  EC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - 
          Key: "Name"
          Value: "OpenReplay"

  EC2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Name"
        Value: !Sub "${ECSCluster}/Private"

  EC2Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref EC2VPC
      MapPublicIpOnLaunch: false
      Tags: 
      - 
        Key: "Name"
        Value: !Sub "${ECSCluster}/Public"

  EC2RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC

  EC2RouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref EC2VPC

  EC2VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: "dopt-3f4ca456"
      VpcId: !Ref EC2VPC

  EC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref EC2InternetGateway
      VpcId: !Ref EC2VPC

  EC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "openreplay sg"
      GroupName: "openreplaysg"
      VpcId: !Ref EC2VPC
      SecurityGroupIngress: 
      - 
        CidrIp: "0.0.0.0/0"
        FromPort: 80
        IpProtocol: "tcp"
        ToPort: 80
      SecurityGroupEgress: 
      - 
        CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
  EC2SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: "Security Group rule for internal communication."
      GroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId
      IpProtocol: "-1"

  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ECSCluster}-frontend"
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
      - !Ref EC2Subnet
      - !Ref EC2Subnet2
      SecurityGroups: 
      - !Ref EC2SecurityGroup
      IpAddressType: "ipv4"

  ElasticLoadBalancingV2Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
      - 
        Order: 1
        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
        Type: "forward"

  EC2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet

  EC2SubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref EC2RouteTable
      SubnetId: !Ref EC2Subnet2

  EC2Route:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable

  EC2Route2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2RouteTable2

  ECSRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "ecsTaskExecutionRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"

